// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Folder {
  id      String    @id @default(cuid())
  name    String
  team    Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId  String
  workflows Workflow[]
}

model Workflow {
  id          String          @id @default(cuid())
  name        String
  description String?
  isScheduled Boolean         @default(false)
  scheduleTime DateTime?
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  folder      Folder?         @relation(fields: [folderId], references: [id])
  folderId    String?
  blocks      WorkflowBlock[]
  runs        WorkflowRun[]
}

model WorkflowBlock {
  id           String         @id @default(cuid())
  name         String
  description  String?
  workflow     Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId   String
  template     WorkflowTemplate? @relation(fields: [templateId], references: [id])
  templateId   String?
  runs         WorkflowBlockRun[]
  order        Int
}

model WorkflowRun {
  id           String         @id @default(cuid())
  workflow     Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId   String
  blocks       WorkflowBlockRun[]
  startedAt    DateTime?
  endedAt      DateTime?
}

model WorkflowBlockRun {
  id           String         @id @default(cuid())
  workflowRun  WorkflowRun    @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  workflowRunId String
  block        WorkflowBlock  @relation(fields: [blockId], references: [id], onDelete: Cascade)
  blockId      String
  status       String
  startedAt    DateTime?
  endedAt      DateTime?
  logs         String?
}

model WorkflowTemplate {
  id          String         @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean
  team        Team           @relation(fields: [teamId], references: [id])
  teamId      String
  blocks      WorkflowBlock[]
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    firstName          String?
    lastName           String?
    username           String?   @unique
    email              String?   @unique
    emailVerified      DateTime?
    image              String?

    onboardingPurpose  String?
    onboardingGoal     String?
    onboardingRole     String?
    accounts           Account[]
    sessions           Session[]
    ownedTeams         Team[]
    teams              TeamMember[]

    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model TeamMember{
    id       String @id @default(cuid())
    team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    isAdmin  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id        String @id @default(cuid())
    name      String
    image     String?
    ownerId   String
    owner     User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    members   TeamMember[]
    folders   Folder[]
    workflows Workflow[]
    templates WorkflowTemplate[]

    stripeCustomerId String?
    stripeSubscriptionId String?
    stripePriceId String?
    stripeCurrentPeriodEnd DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
