// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

enum VideoPlatform {
    YOUTUBE
    TIKTOK
    OTHER
}
model Video {
    id           String @id @default(cuid())
    videoId      String
    title        String
    description  String? @db.LongText
    channel      String?
    platform     VideoPlatform
    url          String
    thumbnailUrl String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    actions      ResourceAction[]
}

enum ActionType {
    STARTED
    STOPPED
}

enum ResourceType {
    VIDEO
}
model ResourceAction {
    id        String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      ActionType
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    video     Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId   String?

    @@index([userId])
    @@index([videoId])
}

model Collection {
    id        String @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    goals        Goal[]

    @@index([userId])
}

model Goal {
    id        String @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String?

    @@index([userId])
    @@index([collectionId])
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    firstName          String?
    lastName           String?
    username           String?   @unique
    email              String?   @unique
    emailVerified      DateTime?
    image              String?

    onboardingPurpose  String?
    onboardingGoal     String?
    onboardingRole     String?
    accounts           Account[]
    sessions           Session[]
    ownedTeams         Team[]
    memberships        TeamMembership[]

    collections        Collection[]
    goals              Goal[]
    resourceActions    ResourceAction[]

    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// Team
enum TeamRole {
    ADMIN
    MEMBER
}
model TeamMembership {
    id       String @id @default(cuid())
    team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    role     TeamRole

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([teamId])
    @@index([userId])
}

model Team {
    id        String @id @default(cuid())
    name      String
    image     String?
    ownerId   String
    owner     User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    members TeamMembership[]

    stripeCustomerId String?
    stripeSubscriptionId String?
    stripePriceId String?
    stripeCurrentPeriodEnd DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
}